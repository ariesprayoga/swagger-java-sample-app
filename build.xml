<?xml version="1.0"?>
<project name="swagger-sample-app-java" xmlns:ivy="antlib:org.apache.ivy.ant" default="build.all" basedir=".">
	<property environment="env" />
	<property name="version.identifier" value="1.0" />
	<property name="artifact.ext" value="jar" />
	<property name="organization" value="wordnik" />
	<property name="module" value="${ant.project.name}" />

	<!-- default dirs for the build -->
	<mkdir dir="lib"/>
	<mkdir dir="lib/ext"/>

	<ivy:settings file="ivysettings.xml" />

	<!-- this is the output module -->
	<property name="module" value="${ant.project.name}" />

	<target name="build.all" depends="clean, resolve, fastcompile" description="builds the module (default target)" />

	<target name="clean" description="cleans the project folder">
		<mkdir dir="build" />
		<echo message="deleting build files" />
		<delete quiet="true">
			<fileset dir="build">
				<include name="*.jar" />
				<include name="*.xml" />
			</fileset>
		</delete>

		<delete dir="build/main" quiet="true" />

		<delete dir="dist" quiet="true" />

		<!-- libraries handled by ivy -->
		<echo message="deleting libs handled by ivy" />
		<delete>
			<fileset dir="lib">
				<include name="*.jar" />
				<include name="*.zip" />
			</fileset>
		</delete>
	</target>

	<!-- copies ONLY the swagger-sample jar to dist-->
	<target name="fastdist" depends="fastcompile">
		<copy todir="dist/lib">
			<fileset dir="build">
				<include name="*.jar" />
			</fileset>
		</copy>
	</target>

	<!-- copies all dependencies into the lib folder -->
	<target name="resolve" description="retreive dependencies with ivy">
		<ivy:retrieve pattern="${basedir}/lib/[artifact]-[revision].[ext]" conf="build" />
	</target>

	<target name="server.start" description="starts the server with stop port enabled">
		<delete quiet="true" file="dist/logs/wordnik.log" />
		<java jar="dist/start.jar" fork="true" dir="dist">
			<jvmarg value="-Xrunjdwp:transport=dt_socket,address=8585,server=y,suspend=n" />
			<sysproperty key="START" value="conf/start.config" />
			<sysproperty key="STOP.PORT" value="8079" />
			<sysproperty key="STOP.KEY" value="stopit" />
			<arg value="conf/jetty.xml" />
		</java>
		<waitfor maxwait="30" maxwaitunit="second" checkevery="500">
			<available file="logs/wordnik.log" />
		</waitfor>
	</target>

	<target name="server.stop" description="stops the server">
		<java jar="dist/start.jar" fork="true">
			<sysproperty key="START" value="conf/start.config" />
			<sysproperty key="STOP.PORT" value="8079" />
			<sysproperty key="STOP.KEY" value="stopit" />
			<arg value="--stop" />
		</java>
	</target>

	<target name="fastcompile" description="builds the module without artifact resolution or cleaning">
		<delete quiet="true" file="build/${organization}-${artifact}-*.${artifact.ext}" />
		<mkdir dir="build" />
		<mkdir dir="build/main" />
		<mkdir dir="build/main/java" />

		<javac srcdir="src/main/java" debug="true" destdir="build/main/java">
			<classpath>
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
				<fileset dir="lib/ext">
					<include name="*.jar" />
				</fileset>
				<pathelement location="build/main/java" />
			</classpath>
		</javac>
		<jar jarfile="build/${module}-${version.identifier}.${artifact.ext}">
			<fileset dir="build/main/java" />
		</jar>
	</target>

	<target name="compile-java-lib" description="builds the module without artifact resolution or cleaning">
		<delete quiet="true" file="build/${organization}-${artifact}-java-lib-*.${artifact.ext}" />
		<mkdir dir="build" />
		<mkdir dir="build/java-lib" />
		<mkdir dir="build/java-lib/java" />

		<javac srcdir="sdk-libs/src/main/java" destdir="build/java-lib/java">
			<classpath>
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
				<fileset dir="lib/ext">
					<include name="*.jar" />
				</fileset>
				<pathelement location="build/java-lib/java" />
			</classpath>
		</javac>
		<jar jarfile="build/${module}-java-lib-${version.identifier}.${artifact.ext}">
			<fileset dir="build/java-lib/java" />
		</jar>
	</target>

	<!-- cleans up the dist -->
	<target name="dist.clean" description="cleans the distribution folder">
		<delete quiet="true" dir="dist" />
		<delete quiet="true" file="dist.zip" />
	</target>

	<!-- creates a distribution of the api server -->
	<target name="dist" depends="build.all" description="creates a runnable distribution">
		<!-- make dist -->
		<delete dir="dist" />

		<mkdir dir="dist" />
		<mkdir dir="dist/lib" />
		<mkdir dir="dist/logs" />

		<!-- copy jetty start -->
		<copy tofile="dist/start.jar">
			<fileset dir="lib">
				<include name="*start*.jar" />
			</fileset>
		</copy>

		<!-- copy all jars -->
		<copy todir="dist/lib">
			<fileset dir="lib">
				<include name="*.jar" />
			</fileset>
			<fileset dir="build">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="dist/lib">
			<fileset dir="lib/ext" />
		</copy>

		<!-- create webapps and work folder -->
		<mkdir dir="dist/webapps" />
		<mkdir dir="dist/work" />

		<!-- copy conf files to webapps -->
		<mkdir dir="dist/webapps/api" />
		<mkdir dir="dist/webapps/api/WEB-INF" />
		<mkdir dir="dist/webapps/api/WEB-INF/classes" />
		<mkdir dir="dist/webapps/api/WEB-INF/lib" />

		<mkdir dir="dist/conf" />
		<copy todir="dist/conf" file="conf/log4j.properties" />

		<copy todir="dist/webapps/api/WEB-INF">
			<fileset dir="conf/web" />
		</copy>

		<!-- copy bin files -->
		<copy todir="dist/bin">
			<fileset dir="bin" />
		</copy>

		<chmod perm="a+x">
			<fileset dir="dist/bin">
				<include name="*.sh" />
			</fileset>
		</chmod>

		<!-- copy jetty start file -->
		<mkdir dir="conf" />
		<copy todir="dist/conf" file="conf/jetty/jetty.xml" />
		<copy todir="dist/conf" file="conf/jetty/webdefault.xml" />

		<copy todir="dist/conf" file="conf/jetty/start.config" />

		<!-- clean up old dists -->
		<delete quiet="true">
			<fileset dir="build">
				<include name="swagger-sample-app-*.zip" />
				<include name="swagger-sample-app-*.pom" />
				<include name="swagger-sample-app-*.jar" />
			</fileset>
		</delete>

		<zip destfile="swagger-sample-app-${version.identifier}.zip">
			<zipfileset dir="dist" includes="**/*" />
		</zip>
		<copy todir="build">
			<fileset dir=".">
				<include name="swagger-*.zip" />
			</fileset>
		</copy>
		<delete quiet="true">
			<fileset dir=".">
				<include name="swagger-sample-app-*.zip" />
			</fileset>
		</delete>
	</target>

	<target name="dependency.tree" description="builds a graphml dependency diagram for viewing with yEd">
		<ivy:report conf="build" graph="true" todir="." outputpattern="[artifact]-[revision].[ext]" />
	</target>
</project>
